// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

Texture2D<float4> source;
RWTexture2D<float4> output;
float radius;
float edgeWidth;
// Number of scanlines in vertical height
int lines;
float4 tintColor;
float tintStrength;
float time;

float Random (float2 pt, float seed) {
    const float a = 12.9898;
    const float b = 78.233;
    const float c = 43758.543123;
    return frac(sin(dot(pt, float2(a, b)) + seed) * c );
}

float InCircle( float2 pt, float2 center, float radius, float edgeWidth ){
    float len = length(pt - center);
    return 1.0 - smoothstep(radius-edgeWidth, radius, len);
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // lowering resolution
    uint2 index = (uint2(id.x, id.y) / 3) * 3;

    float noise = Random((float2)id.xy, time);

    // create low res camera image effect
    float3 srcColor = lerp(source[id.xy].rgb * 2, source[index].rgb, noise);

    // create grey image
    float3 grayScale = (srcColor.r + srcColor.g + srcColor.b) / 3.0;
    float3 tinted = grayScale * tintColor.rgb;
    // Add tint value (0 =  no tint, 1 = full tint)
    float3 finalColor = lerp(srcColor, tinted, tintStrength);

    // percent in y
    float uvY = (float)id.y / (float)source.Length.y;
    // frac = only decimal part of number
    // smoothstep = returns 0 when frac below 0.1 and 1 if above 0.2
    // saturate = clamps between 0 and 1
    float scanline = saturate(smoothstep(0.1, 0.2, frac(uvY * lines + time * 3)) + 0.3);
    finalColor = lerp(source[id.xy].rgb * 0.5, finalColor, scanline);
    
    float2 pt = (float2)id.xy;
    float2 center = float2(source.Length * 0.5);
    center.x -= radius * 0.7;
    float leftLense = InCircle(pt, center, radius, edgeWidth);
    center.x += radius * 1.4;
    float rightLense = InCircle(pt, center, radius, edgeWidth);
    float inVision = saturate(leftLense + rightLense);
    float3 black = 0;
    finalColor = lerp(black, finalColor, inVision);

    output[id.xy] = float4(finalColor, 1);
}